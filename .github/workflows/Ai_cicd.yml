on:
  pull_request:
    types: [opened, synchronize]

# 添加這個權限區塊
permissions:
  contents: read
  pull-requests: write  # 這使工作流程可以評論和編輯 PR

jobs:
  ai_test_suggestion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"  # 可依需求調整 Python 版本
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-generativeai pyyaml requests

      - name: Get PR Details
        id: pr_details
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_number=${{ github.event.pull_request.number }}
          gh pr view $pr_number
          echo "PR_TITLE=$(gh pr view $pr_number --json title -q .title)" >> $GITHUB_ENV
          echo "PR_BODY=$(gh pr view $pr_number --json body -q .body)" >> $GITHUB_ENV
      
      - name: Create script directory
        run: |
          mkdir -p .github/scripts
      
      - name: Create AI script
        run: |
          cat > .github/scripts/Ai_run.py << 'EOF'
          import os
          import sys
          import yaml
          import re
          import google.generativeai as genai

          # 讀取環境變數
          api_key = os.getenv("GOOGLE_API_KEY")
          pr_title = os.getenv("PR_TITLE", "")
          pr_body = os.getenv("PR_BODY", "")

          if not api_key:
              raise ValueError("API Key 未設定，請檢查 GitHub Secrets")

          # 讀取測試標籤 YAML 檔案
          try:
              # 嘗試從倉庫中讀取 YAML 檔案
              yaml_paths = [
                  '.github/data/test_tags.yaml',  # 首選路徑
                  'test_tags.yaml',                # 備選路徑
                  '.github/test_tags.yaml'         # 另一個備選路徑
              ]
              
              tags_data = None
              for path in yaml_paths:
                  if os.path.exists(path):
                      with open(path, 'r') as file:
                          tags_data = yaml.safe_load(file)
                      print(f"成功從 {path} 讀取標籤")
                      break
              
              # 若都沒找到，使用預設值
              if tags_data is None:
                  raise FileNotFoundError("找不到標籤檔案")
                  
              # 將標籤列表轉換為逗號分隔的字符串
              available_tags = ", ".join(tags_data.get('tags', []))
          except Exception as e:
              print(f"讀取標籤檔案時發生錯誤: {e}")
              available_tags = "livestream, settings, following, login, register"  # 預設標籤，以防檔案讀取失敗

          # 初始化 Google GenAI 客戶端
          genai.configure(api_key=api_key)

          # 生成 AI 分析內容
          prompt = f"""
          你是一位專業的軟體測試專家，請根據以下 PR 標題和描述，以及測試提供的現有 Tags，提供符合內容的自動化測試Tags，並寫成 TEST_RANGE：login, register ...etc

          PR 標題: {pr_title}
          PR 內文: {pr_body}

          可用的測試 Tags: {available_tags}
          """

          try:
              # 使用 gemini-2.0-flash 模型生成內容
              model = genai.GenerativeModel(model_name="gemini-2.0-flash")
              response = model.generate_content(
                  prompt,
                  generation_config=genai.GenerationConfig(
                      temperature=0.2,
                      top_p=0.7,
                      max_output_tokens=1024
                  )
              )
              
              # 擷取 AI 建議
              suggestions = response.text
              
              # 儲存到檔案
              with open("ai_suggestions.txt", "w", encoding="utf-8") as f:
                  f.write(f"🚀 **AI 測試建議**\n{suggestions}")
              
              # 嘗試從回應中提取 TEST_RANGE
              test_range_match = re.search(r'TEST_RANGE:\s*(.*?)(?:\n\n|$)', suggestions, re.DOTALL)
              if test_range_match:
                  test_range = test_range_match.group(1).strip()
                  # 保存 TEST_RANGE 到單獨的文件
                  with open("test_range.txt", "w", encoding="utf-8") as f:
                      f.write(test_range)
                  print(f"成功提取並保存 TEST_RANGE: {test_range}")
              else:
                  print("無法從 AI 建議中提取 TEST_RANGE")
              
          except Exception as e:
              print(f"生成內容時發生錯誤: {e}")
              sys.exit(1)
          EOF
          
      - name: Run AI Analysis
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: python .github/scripts/Ai_run.py
        
      - name: Comment on PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr comment ${{ github.event.pull_request.number }} --body "$(cat ai_suggestions.txt)"
        
      - name: Update PR description with TEST_RANGE
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f "test_range.txt" ]; then
            PR_NUMBER=${{ github.event.pull_request.number }}
            TEST_RANGE=$(cat test_range.txt)
            
            # 獲取當前 PR 描述
            CURRENT_BODY=$(gh pr view $PR_NUMBER --json body -q .body)
            
            # 創建臨時文件以避免 YAML 語法問題
            if [[ "$CURRENT_BODY" == *"TEST_RANGE:"* ]]; then
              # 存在則替換
              echo "$CURRENT_BODY" | sed "s/TEST_RANGE:.*$/TEST_RANGE: $TEST_RANGE/" > new_body.txt
            else
              # 不存在則添加
              if [ -z "$CURRENT_BODY" ]; then
                echo "TEST_RANGE: $TEST_RANGE" > new_body.txt
              else
                echo "$CURRENT_BODY" > new_body.txt
                echo "" >> new_body.txt
                echo "TEST_RANGE: $TEST_RANGE" >> new_body.txt
              fi
            fi
            
            # 更新 PR 描述
            gh pr edit $PR_NUMBER --body-file new_body.txt
          else
            echo "找不到 test_range.txt 文件"
          fi